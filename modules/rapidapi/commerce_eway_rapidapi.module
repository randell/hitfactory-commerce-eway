<?php

/**
 * @file
 * Implements eWay Rapid API payment services for Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_eway_rapidapi_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['eway_rapidapi'] = array(
    'base' => 'commerce_eway_rapidapi',
    'title' => t('eWAY Rapid API'),
    'short_title' => t('eWAY Rapid API payments'),
    'display_title' => t('Credit card'),
    'description' => t('Allows payments via the eWAY Rapid API.'),
  	'offsite' => FALSE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the eWAY RapidAPI payment method.
 */
function commerce_eway_rapidapi_default_settings() {
  return array(
    'customer_id' => '',
    'username' => '',
    'password' => '',
    'log' => array('request' => 0, 'response' => 0),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_eway_rapidapi_settings_form($settings = NULL) {
	$settings += commerce_eway_rapidapi_default_settings();

	$form = array();

	// TODO: Add setting for country

  $form['customer_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Customer ID'),
    '#default_value' => $settings['customer_id'],
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => $settings['username'],
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => $settings['password'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );
	return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_eway_rapidapi_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

	// Ensure fields for CVN and Cardholder Name are added.
  $fields = array(
    'code' => '',
    'owner' => '',
  );

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_eway_rapidapi_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_eway_rapidapi_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

	global $base_url;

	// Create and populate the request object.
	$request = array();

	// Add Customer ID, Username and Password to the request array.
  $request['Authentication']['CustomerID'] = $payment_method['settings']['customer_id'];
  $request['Authentication']['Username'] = $payment_method['settings']['username'];
  $request['Authentication']['Password'] = $payment_method['settings']['password'];

  // Add Payment data.
  $request['Payment']['TotalAmount'] = '';

  // Get the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  // Add Billing Information.
  $request['Customer']['FirstName'] = $billing_address['first_name'];
  $request['Customer']['LastName'] = $billing_address['last_name'];
  $request['Customer']['Street1'] = $billing_address['thoroughfare'];
  $request['Customer']['City'] = $billing_address['locality'];
  $request['Customer']['State'] =  $billing_address['administrative_area'];
  $request['Customer']['PostalCode'] = $billing_address['postal_code'];
  $request['Customer']['Country'] = $billing_address['country'];

  $request['ResponseMode'] = 'Return';
  // TODO: Is this needed when ResponseMode is Return?
  $request['RedirectUrl'] = $base_url;

	// Make CreateAccessCode request
	if ($response = commerce_eway_soap_request($payment_method, 'CreateAccessCode', 'endpoint', $request)) {
		$response = $response->CreateAccessCodeResult;

    // POST the card data if we have an access code.
    if (isset($response->AccessCode) && !empty($response->AccessCode)) {

    	$access_code = (string)$response->AccessCode;

    	$post = array();
      $post['EWAY_ACCESSCODE'] = $access_code;
      $post['EWAY_CARDNAME'] = $pane['values']['credit_card']['owner'];
      $post['EWAY_CARDNUMBER'] = $pane['values']['credit_card']['number'];
      $post['EWAY_CARDMONTH'] = $pane['values']['credit_card']['exp_month'];
      $post['EWAY_CARDYEAR'] = $pane['values']['credit_card']['exp_year'];
      $post['EWAY_CARDCVN'] = $pane['values']['credit_card']['code'];

    	$post_url = commerce_eway_url($payment_method, 'payment');
    	$response = drupal_http_request($post_url, $post);

    	if ($response) {
    		// Make CreateAccessCodeResult request.
    		if ($response = commerce_eway_soap_request($payment_method, 'GetAccessCodeResult', 'endpoint', $request)) {
					$response = $response->CreateAccessCodeResult;
				}
    	}




    }
	}
	else {
    drupal_set_message(t('We encountered an error contacting your payment processor. Please try submitting your payment again.'), 'error');
    return FALSE;
  }

}