<?php
/**
 * @file
 * Implements eWAY payments for Drupal Commerce.
 */

 /**
 * Returns an eWAY request URL.
 *
 * @param $method_id
 * Payment method ID
 *
 * @param $type
 * Type of request e.g. 'endpoint' or 'payment'
 */
function commerce_eway_url($method_id, $type) {

  // TODO: Get country from payment method settings.
  $country = 'au';
  $method = $method_id . '_' . $type;

  switch($method) {
  	case 'rapidapi_endpoint':
  		$url = 'https://' . $country . '.ewaypayments.com/hotpotato/soap.asmx?wsdl';
  	break;
  	case 'rapidapi_payment':
  		$url = 'https://' . $country . '.ewaypayments.com/hotpotato/payment';
  	break;
  }

  return $url;
}

/**
 * Submits a SOAP request to an eWay endpoint.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 * @param $request_method
 *   eWAY request method e.g. CreateAccessCode
 * @param $type
 * Type of request e.g. 'endpoint' or 'payment'
  * @param $mode
 * Transaction mode e.g. 'live' or 'sandbox'
 * @param $request
 *   The request object containing the parameters of the requested services.
 *
 * @return
 *   The response object from the API with properties pertinent to the requested
 *     services.
 */
function commerce_eway_soap_request($payment_method, $request_method, $type, $request) {

	// Get the API endpoint URL for the method's transaction mode.
	$method_id = $payment_method['method_id'];

	// TODO: Extract eWAY method
	$eway_method = 'rapidapi';

  $url = commerce_eway_url($eway_method, $type);

  // Log the request.
  if ($payment_method['settings']['log']['request'] == 'request') {
  	watchdog('commerce_eway', 'eWAY RapidAPI request: !param', array('!param' => '<pre>' . check_plain(print_r($request, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  // Attempt the SOAP request.
  try {
    $soapClient = new SoapClient($url, array('trace' => 1));
    switch($request_method) {
    	case 'CreateAccessCode':
    		$response = $soapClient->CreateAccessCode(array('request' => $request));
    	break;
    	case 'GetAccessCodeResult':
    		$response = $soapClient->GetAccessCodeResult(array('request' => $request));
    }

    // Log the raw SOAP request.
    if ($payment_method['settings']['log']['request'] == 'request') {
      $soap_request = $soapClient->__getLastRequest();
      watchdog('commerce_eway', 'eWAY RapidAPI soap request: !param', array('!param' => '<pre>' . check_plain(print_r($soap_request, TRUE)) . '</pre>', WATCHDOG_DEBUG));
    }
    // Log the raw SOAP request.
    if ($payment_method['settings']['log']['response'] == 'response') {
      $soap_response = $soapClient->__getLastResponse();
      watchdog('commerce_eway', 'eWAY RapidAPI soap response: !param', array('!param' => '<pre>' . check_plain(print_r($soap_response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
    }
  }
  catch (SoapFault $exception) {
    watchdog('commerce_eway', 'SoapFault: !exception', array('!exception' => '<pre>' . print_r($exception, TRUE) . '</pre>'), WATCHDOG_ERROR);
    return FALSE;
  }

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_eway', 'eWAY RapidAPI response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  return $response;
}

/**
 * Submit a POST request to EWAY.
 *
 * Uses CURL instead of drupal_http_request.
 */
function commerce_eway_post_request($payment_method, $data) {

  // Get the API endpoint URL for the method's transaction mode.
  $method_id = $payment_method['method_id'];

  // TODO: Extract eWAY method
  $eway_method = 'rapidapi';

  $url = commerce_eway_url($eway_method, 'payment');

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_eway_post_request', $data);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_data = $data;
    $log_data['EWAY_CARDNUMBER'] = str_repeat('X', strlen($log_data['EWAY_CARDNUMBER']) - 4) . substr($log_data['EWAY_CARDNUMBER'], -4);
    $log_data['EWAY_CARDCVN'] = str_repeat('X', strlen($log_data['EWAY_CARDCVN']));

    watchdog('commerce_eway', 'eWAY POST request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_data, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();

  foreach ($data as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));
  $response = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_eway', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_eway', 'eWAY POST response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }
  return $response;
}